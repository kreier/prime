<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>// AP CSP challenge: Fastest way to calculate prime numbers
// https://sites.google.com/ssis.edu.vn/apcsp/home/challenges

// Times to check prime numbers to 10,000
// v1 crashes with stack overflow because divisor gets too large
// v2 1.29 seconds - divisor only until squareroot of number
// v3 0.71 seconds - move to SwiftUI, removed remaining calculation step
// v4 0.63 seconds - only odd numbers from 5 on
// v5 0.62 seconds - start with 11 and divider 3 (no even numbers)
// v6 0.34 seconds - only odd dividers from 3 on
// v7 0.06 seconds - using modulus % operator

// Times the check prime numbers to 100,000 (9592) and 1,000,000 (78,498)
// v7 0.67 sec - 1,000,000 crashes with 78 GBytes of RAM utilization
// v8 0.59 sec - not printing the result, and 7.19 seconds for 1,000,000

// for comparison: in python 11.86 seconds to 1,000,000

import SwiftUI

let lastNumber = 1000000
var count = 4 // start from 11, know 2, 3, 5, 7
var prime = true
var startTime = NSDate()

print("We calcuate the prime numbers until", lastNumber, "\n")
print("\n2 3 5 7", terminator:" ") // because upper limit divisor
for number in stride(from: 11, through: lastNumber, by: 2) {
    prime = true
    for divisor in stride(from: 3, through: Int(Double(number).squareRoot()), by: 2) { 
        if number % divisor == 0 {
            prime = false
            break
        }
    }
    if prime {
//        print(number, terminator:" ")
        count += 1
    }
}

var stopTime = NSDate()
var interval = stopTime.timeIntervalSince(startTime as Date)
print("\n\nThis calculation took", interval,"seconds.")
print("I found", count, "prime numbers.")
</string>
			<key>ModifiedRange</key>
			<string>{0, 1637}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
